//go:build ignore
// +build ignore

// 本文件不参与项目整体编译, 因此使用 go:build ignore 忽略
// 因此本文件可以使用 main 作为包名直接运行

// 在本目录下执行本文件:
//
//	go run tuple_gen.go
//
// 以生成 tuple_more.go 文件
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strings"

	"code.gopub.tech/commons/funcs"
	"code.gopub.tech/commons/iters"
)

func main() {
	buf := new(bytes.Buffer)

	fmt.Fprintln(buf, "// code generated by `go run tuple_gen.go`; DO NOT EDIT.")
	fmt.Fprintln(buf)
	fmt.Fprintln(buf, "package values")
	fmt.Fprintln(buf)

	for i := 3; i <= 10; i++ {
		fmt.Fprintln(buf, makeTuple(i))
		fmt.Fprintln(buf)
	}

	//	fmt.Println(buf.String())

	source, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Printf("format err=%+v\n", err)
	} else {
		err = os.WriteFile("tuple_more.go", source, 0660)
		if err != nil {
			fmt.Printf("write err=%+v\n", err)
		}
	}
}

func makeTuple(i int) string {
	p := makeList(i, func(n int) string {
		return fmt.Sprintf("T%d", n)
	}, ", ")
	return fmt.Sprintf(`type Tuple%d[%s any] struct {
		%s
	}
	func Make%d[%s any](%s) Tuple%d[%s]{
		return Tuple%d[%s]{
		%s,
		}
	}`,
		i,
		p,
		makeList(i, func(i int) string {
			return fmt.Sprintf("Val%d T%d", i, i)
		}, "\n\t"),
		i,
		p,
		makeList(i, func(n int) string {
			return fmt.Sprintf("v%d T%d", n, n)
		}, ", "),
		i,
		p,
		i,
		p,
		makeList(i, func(n int) string {
			return fmt.Sprintf("Val%d: v%d", n, n)
		}, ",\n\t"),
	)
}

func makeList(i int, fn funcs.Function[int, string], lineSep string) string {
	return strings.Join(iters.Maps(
		iters.Range(1, i+1), fn,
	).ToSlice(), lineSep)
}
